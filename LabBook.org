#+TITLE: Bellini's Dissertation LabBook
#+AUTHOR: Lucas e Tais
#+LATEX_HEADER: \usepackage[margin=2cm,a4paper]{geometry}
#+STARTUP: overview indent
#+TAGS: Lucas(L) Tais(T) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)

* 2015-09-15 Structure / Draft of TCC                            :Lucas:Tais:

1. Introduction (3 pages max)
   + Context (current scenario with pajeng c++)
   + Motivation
2. Basic Concepts? (5 pages max)
   + JavaCC?
   + Ferramentas de análise de desempenho
   + MySQL ? 
3. PajeNG
   + How it is used by others (pjdump, etc)
   + Description of how it works internally
   + The problems with the current approach
     + Focus on your contribution
4. Java Simulator
   + Overview
     - extensible, java, problems solved, structure, image.
   + option handling
     - library 
     - one class to make it easier to the user
     - the general options ONLY
   + Parsing 
     - JavaCC, why, 
     - PajeGrammar,jj file 
       - it is the entry point of the program. 
       - it has java code and the main class
       - it has variables that are global for the whole program 
     - grammar
   + simulation
     - same structure as PajeNG, why? because it was working. not
       reduce the extensibility, just add more. 
     - technical differences
   + plugins
     - PajePlugin class
     - instrumentation points
   + how to compile and execute
     - basic options to execute - filename, comment, platform
5. Plugins
  + Null
  + PjDump
    - which options in options handler it adds.
  + MySQL
    + Database modeling
    + arguments added to the options handler. (batches, server, etc.)
      
6. Performance Evaluation
  + Overview of what is being evaluated and why (my sql is the only NEW feature)
  + Methodology
  + Results and grafics
  + Possible explanations
7. Conclusion

* 2016-03-17 Meeting with Tais (TCC Registration)                :Lucas:Tais:

_Title_

Extensible Simulator for Trace Replay

_Abstract_

Observation of program behavior is particularly important in High
Performance Computing since it enables a performance analysis. Tracing
is a very common method to do so, where interesting program events are
registered in trace files. Replaying these trace files through
simulation is used to analyze the data. The idea of simulation is to
combine information that is spread in multiple events deriving new and
richer combined entities. Usually, this event processing is done once
and discarded, an approach adopted, for instance, by the Paje trace
simulator. Since today trace files can be very large, it would be
interesting to save these entities for future analysis. The objective
of this proposal is to allow the performance analyst to change the
simulator behavior when entities are detected. This extensibility
should be implemented through plugins, that could be developed by
anyone. The methodology to implement this objective is to develop a
extensible simulator where every time an entity is created, it would
direct that information to a plugin. It will be the plugin's
reponsability to handle the entity. As a proof of concept, this work
will propose the implementation of two plugins: a textual output
similar to Paje's =pj_dump=; and an efficient database insertion in a
pre-defined relational schema. A performance evaluation will be
conducted to compare the trace simulator against other existing
similar approaches.

_Side Note_
- Change way variables are stored in tables
  - Each entry (value) of one given variable must have start and end time
- Two meetings are expected
  - Performance analysis of the implementation
  - TCC organization (script/plan)
- How to save in Emacs (C-x C-s)
  - Copy: Select with the mouse or keyboard and then M-w
  - Past: C-y


* 2016-04-20 TCC Structure                                       :Lucas:Tais:

1. Introduction
   - Overview/Context
     - Observation of program behavior is particularly important in
       High Performance Computing since it enables a performance
       analysis. Tracing is a very common method to do so, where
       interesting program events are registered in trace
       files. Replaying these trace files through simulation is used
       to analyze the data. The idea of simulation is to combine
       information that is spread in multiple events deriving new and
       richer combined entities. Usually, this event processing is
       done once and discarded, an approach adopted, for instance, by
       the Paje trace simulator. Since today trace files can be very
       large, it would be interesting to save these entities for
       future analysis.
   - Specific Context
     - About Paje, how it works, ...
       - Who use it: SimGrid, StarPU, 
     - How does it work?
   - Problem identification
     - There are at least three problems with the current
       implementaton of Paje: 1, 2 and 3.
     - It is very complicated to change the Paje simulator behavior,
       since it requires code modifications in the simulator core and
       understand code details.
     - The simulator creates the entities according to the events, but
       the user needs to wait the end of simulation to access the
       data. You cannot have a partial view of already simulated data.
     - Last, once the simulator finished, all the simulation effort is
       lost since no record of the simulated entities are kept between
       executions.
   - Objective
     - The objective of this proposal is to allow the performance
       analyst to change the simulator behavior when entities are
       detected. This extensibility can be implemented through plugins
       that can be attached to the simulator in specific and important
       points where trace events are combined. This main objective
       solves the first problem previously presented, about the
       extensability of the simulator. Secondary objectives are the
       creation of plugins to dump partial simulated data and to make
       simulated data permanent. Finally, do a performance analysis to
       compare against the previous implementation of the paje simulator.
   - Main Results
     - We have implemented two plugins: one for data insertion in a
       DB, another to dump to standard output partial simulated data.
     - Highlight the main performance analysis results.
2. Basic Concepts? (5 pages max)
   + JavaCC? their flex
     - Introduction
     - How does it work (.jj -> .java -> .class)
     - .jj has a grammar, you can define a grammar the same way you do
       in bison/yacc
     - Other alternatives to javacc
       - ANTLR, but it is too slow (maybe show a plot comparing both
         if you have time)
   + R and Experimental Design
     - What is an experimental design?
     - Full factorial design!
     - Jain 1991
     - R to develop the factorial design
   + MySQL ?
     - 
3. PajeNG and the Paje File Format (3 to 4 pages, finish with a motivation to your own work)
   - Paje File Format
   - Overview
     - Container
     - State
     - Variables
     - Links
     - Events
     - Container has all others
   - Definition of events
   - Type hierarchy 
   - Events
     - Container
     - State
     - Event
     - Variable
     - Link 
   - PajeNG
     + How it is used by others (pjdump, etc)
       - In SimGrid, trace is in Paje file format, but all people use
         the CSV (the result of Paje simulation obtained through
         pjdump)
     + Description of how it works internally
       - It is a library with three main components
         - FileReader
         - EventDecoder
         - PajeSimulator
       - Works as a pipeline
         - See http://paje.sf.net/
           - Pajé, an interactive visualization tool for tuning multi-threaded parallel applications.
             A. Chassin de Kergommeaux, B. de Oliveira Stein, and Bernard P.E.
             Parallel Computing, 26(10):1253–1274, aug 2000.
           - See in particular the Fig. 7

     + _The problems with the current approach_
       - There are at least three problems with the current
         implementaton of Paje: 1, 2 and 3.
       - It is very complicated to change the Paje simulator behavior,
         since it requires code modifications in the simulator core and
         understand code details.
       - The simulator creates the entities according to the events, but
         the user needs to wait the end of simulation to access the
         data. You cannot have a partial view of already simulated data.
       - Last, once the simulator finished, all the simulation effort is
         lost since no record of the simulated entities are kept between
         executions.
     + Differences against your own contribution
       - My contribution is detailed in the next two chapters
4. Our Approach: a Java-based Simulator
   - Start with an overview
     - Figure showing all your components

   - Instrumentation points
     + The instrumentation points where plugins can be attached to
     - Describe each instrumentation point
       - The information that is passed along
       - Justify the presence of each information
     - Make reference to the overview figure
     - Figure
       - Has the simulator core (the component)
         - All the points

   - JavaCC Parsing and Paje File format grammar
     - Explain the grammar in yacc/bison terminology
       - Non-terminals, terminals..., tokens
     - Top-down parsing... or bottom-up?
     - Explain the process of transforming the grammar to java code

   - Simulator core
     - Follows the same structure of PajeNG
       - Simulator and Container (where simulation happens)
       - Use stack to simulate states
     - What are the _technical_ differences against PajeNG

   Next chapter details the implementation of the two plugins.

5. Plugins

The methodology to implement this objective is to develop a
extensible simulator where every time an entity is created, it would
direct that information to a plugin. It will be the plugin's
reponsability to handle the entity. As a proof of concept, this work
will propose the implementation of two plugins: a textual output
similar to Paje's =pj_dump=; and an efficient database insertion in a
pre-defined relational schema. A performance evaluation will be
conducted to compare the trace simulator against other existing
similar approaches.

   + Null
   + PjDump
   + MySQL
     + Database modeling
     + arguments (batches, server, etc.)

6. Performance Evaluation
   + Overview of what is being evaluated and why 
    - PajeNG. since it is a re implementation
    - inset db plugin, it is the NEW feature. 
    - characterize briefly
   + Experimental Methodology
     - Full factorial
     - Characterization of the platforms
     - Description of each experiment with factors and resulting table
        - null plugin / flex/ reader. hipotesis.
        - batch sizes. why? hipotesis.  
   + Results and grafics
   + Possible explanations
   + 


7. Conclusion
   - All efforts in the simulator optimization benefit all plugins.
   - Future work
     - Perf. Eval. in Windows

Appendix
- How to implement a plugin?

* References

** 23/04

https://dzone.com/articles/antlr-and-javacc-parser-generators
https://javacc.java.net/
http://www.computing.dcu.ie/~hamilton/teaching/CA448/notes/JavaCClex2.pdf

** 24/04
http://eriklievaart.com/blog/javacc2.html
http://paje.sourceforge.net/download/publication/lang-paje.pdf

** 26/04

http://www.jmp.com/support/help/Full_Factorial_Designs.shtml
https://cran.r-project.org/web/packages/DoE.base/DoE.base.pdf

https://github.com/schnorr/pajeng/wiki/pj_dump

http://simgrid.gforge.inria.fr/tutorials/simgrid-tracing-101.pdf
http://simgrid.gforge.inria.fr/



** 14/05
http://www.tutorialspoint.com/jdbc/jdbc-introduction.htm


* Other points:
- use the \label command in each chapter to mark (I give you an
  example in basic concepts chapter below)
- use the \ref to make reference to a chapter/section, such as
  \ref{chapter.basic_concepts}. This provides you a cleaner way to
  reference things, such as figures, tables, sections, whatever.
- you need to cite the documents you reference, and still cite related
  work that support your motivation. I'll give you an example of that
  asap, using bibtex.


(Write about the current extensibility of Paje original and next
generation. Say that is not enough for current needs because writing
a full component for Paje is a complex thing - one needs to know the
protocol, the internal objects and class hierarchy and so on. Very few
people have done so.)

* Parts cut off 

It is very complicated to change the Paje simulator behavior,
since it requires code modifications in the simulator core, which
depends upon understanding details of the program. If a performance
analyst wants to evaluate only one type of entity, or needs a
different presentation of the data, he will need to have at least a
basic understanding of how the program is implemented in order to
generate these different results. 

The first part of Aiyra simulator consists in reading a trace file,
that is in a specific standard, and parsing it to define how each line
of the entry will be simulated. 

The proposed program contains instrumentation points which
allow the creation of plugins attached to it. For example, if one
wants to handle only state entities, he can create a plugin attached
only to the points that are related to states. The other entities
created will be discarded by the simulator.


It is worth
mentioning that, 

* Machines info

_luiza_: OS X Yosemite 10.10.5
 Nome do Modelo:	MacBook Pro
  Identificador do Modelo:	MacBookPro10,1
  Nome do Processador:	Intel Core i7
  Velocidade do Processador:	2.7 GHz
  Número de Processadores:	1
  Número Total de Núcleos:	4
  Cache L2 (por Núcleo):	256 KB
  Cache de L3:	6 MB
  Memória:	16 GB
Disco: 500 GB

_guarani_: Linux guarani 4.3.0-1-amd64 #1 SMP Debian 4.3.5-1
(2016-02-06) x86_64 GNU/Linux

Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                4
On-line CPU(s) list:   0-3
Thread(s) per core:    1
Core(s) per socket:    4
Socket(s):             1
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 42
Model name:            Intel(R) Core(TM) i5-2400 CPU @ 3.10GHz
Stepping:              7
CPU MHz:               1601.222
CPU max MHz:           3400.0000
CPU min MHz:           1600.0000
BogoMIPS:              6185.49
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              6144K


_orion_: Linux orion1 3.13.0-85-generic #129~precise1-Ubuntu SMP Fri Mar 18 17:38:08 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux 

Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                24
On-line CPU(s) list:   0-23
Thread(s) per core:    2
Core(s) per socket:    6
Socket(s):             2
NUMA node(s):          2
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 45
Stepping:              7
CPU MHz:               2000.000
BogoMIPS:              4601.07
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              15360K
NUMA node0 CPU(s):     0,2,4,6,8,10,12,14,16,18,20,22
NUMA node1 CPU(s):     1,3,5,7,9,11,13,15,17,19,21,23

model name      : Intel(R) Xeon(R) CPU E5-2630 0 @ 2.30GHz


guarani_orion: 

traceroute to orion1 (143.54.12.114), 30 hops max, 60 byte packets
 1  143.54.13.1 (143.54.13.1)  0.619 ms  0.975 ms  1.329 ms
 2  orion1.inf.ufrgs.br (143.54.12.114)  0.547 ms  0.551 ms  0.544 ms

ping: rtt min/avg/max/mdev = 0.280/0.510/0.559/0.065 ms

rede do inf: 100Mb

* Comments


_Global Comment_
- Check the PDF to respect all margins
- Compile latex manually with =pdflatex= after export to latex
  - Pay attention to these warnings: they are in fact errors
    - LaTeX Warning: There were undefined references.
    - LaTeX Warning: There were multiply-defined labels.
- All figures should be included as PDF (export to PDF with your
  figure editing tool), then include them here as PDF. That way, your
  figures will probably be vectorial, smaller and render much nicely
  in the final PDF.


_Comments_:
- pass =aspell= check, using =flyspell-buffer= command with M-x
  - you may need to install it first

** Chapter 2: 

_Comment_: a more direct way of introducing the chapter follows. "This
chapter presents the basic concepts of technologies adopted to develop
this project. They contribute to the understanding of our work."

_Comment_: state very briefly (one phrase) what you are going to write
about in the chapter. Example: "Two topics are covered: the Java
Compiler Compiler (JavaCC) and the a general overview about
experimental design in the scope of the R language."

_Comment_: It is very strange to me find things about Aiyra here. You
haven't presented it yet. Stick to the basics: there is no need to
justify why you are talking about JavaCC. You could start directly
with something like this: "Java Compiler Compiler (JavaCC) is a
lexical and parser generator..."

_Comment_: You need to cite someone that shows that JavaCC is faster
than ANTLR.

_Comments_: Usually we avoid the use of singular first person
(i.e. I). Use plural first person (i.e. "We"). Perhaps a figure here
would be nice.

_Comment_: Before going to the subsections below, state what you are
going to talk about.

_Comment about next two subsections_: (structure and syntax) and (usage
with java). I think these subsections should be placed in an
appendix. You can of course write a little about how it is roughly
made using =javacc=, but without too much details. You refer to the
appendix to further details. I think one of the appendix will be these
subsections, then you create another one with the actual code of
current implementation (without the simulator, only the parser).

_Comment_: you don't need to say you have used experimental evaluation
in the perf. eval. Say it later. for now, stick to the basic concepts
description. A good start is "Experimental design is an area of
statistics interest in creating good designs to correctly observe and
measure behavior ..."

_Comment_: next sections have so few text. I am not sure subsections are
required. You could simply transform "Terminology" in a
paragraph. Then, talk about the FF design. You probably should mention
fractional designs as well. The "R language" subsection could be
upgraded to a chapter's section, since it is independent of
experimental designs. You just found out that using R to design
experiments is neat.

_Comment_:
- I see that one of the main's JBDC advantages is that you can do
  standard SQL commands in the source code. If you change the DBMS,
  there is no problem. So, you are not bounded to use a single DBMS
  and can migrate from one to another very easily.

_Comment_:
- I think you should start with "Figure X explain the ER
  concepts". Then you continue describing the concepts and making
  references to the figure. It is much better when you write down
  like this because you know the figure already exists when the
  paragraph starts.

Comments_:
- Jain. Reference the second edition of
  the book that appeared last year.


_Comments_:
- Was this (the text) yours? 

_Comments_
- You should provide a better example. Give at least 2 factors, one
  with 2 and another with 3 levels; 30 replications. You can take
  exactly one of the FF designs you have adopted. And even mention by
  the end of the paragraph that this example actually was used for
  designing your experiments.

 Since the new generation (PajeNG) follows the exact same
structure as the original Pajé, it will be the only one to be
detailed.

_Comment_:
- this last phrase sound strange, because you haven't presented yet
  PajeNG so reader has no idea there is an "old" version written in
  Objective-C and a new one in C++. Still, you should mention there
  (in the appropriate section) the source code language of each of
  them, so the reader knows the "main" difference.

_Comment_:
- Figure improved a lot. Thanks. Unfortunately, text still looks like
  very small when comparing to the ordinary surrounding text. Can you
  print to see if it is readable? Maybe it's just a bad feeling from
  my side.



_Comment_:
- You mention in the paragraph above that there are event definition
  and type definition. Then, below, you state the division in two
  sections. I think the paragraph below should come _before_, so the
  reader has a global understanding of the trace organization before
  going into the details. Still, the paragraph above could be simply
  moved to the _Events_ subsection below. 
_CommentonComment_ removed the three segments separation. I was afraid
to change from the original document but I believe it is better to
separate in only two.


_Comment_:
- Which appendix? You should put a label there and a ref here.

_Comments_:
- A small figure here would be nice. You have JavaCC in the middle,
  drawn as a component. On its left side you have the file
  =MyGrammar.jj=; on its right, the different files as output. You mark
  those that are just the boilerplates from those that are
  important. Finally, you change the paragraph above to make reference
  to this figure, mentioning the figure from the start.


_Comment_:
- You forgot the period in the last sentence. Pay attention to the PDF
  output. It is easier to see this kind of mistakes there.
- You have used both *this* and =this= here. Stick to a rule. Of course
  you can use both, but use it always the same way.


_Comment_:
- The text in this figure is barely readable. Fix it please.
- You should pay attention to colors, sometimes they are not well
  fitted for gray tones usually used when printing.
  - Consider this for all figures





** Chapter 3:

 _Comments_:
- "tool is a tool" sounds strange;
- "display the execution" => "display the execution behavior"
- "all the types of entities" => "all entities types"

_Comments_:
- Period after entity above.
- Make a reference to the paje file format definition (the PDF)
- 

_Comments_:
- "along the time" => "along time"
- Can't understand the last phrase of variable paragraph

_Comments_:
- There are two separated hierarchies. The first one is the type
  hierarchy; the second is the entities (objects hierarchy). Both have
  the same structure, the difference relies on the number of
  nodes. While the type hierarchy has only a few; the object hierarchy
  may have millions depending on the number of containers on the
  trace. The simulator uses the type hierarchy to verify
  correctness. Some people call type hierarchy  the trace model.
- You may rewrite the text below considering this, since it isn't clear.
- You could provide a figure with an example of all this. I think it
  would help to make it clearer.


_Comments_: great, all this to the appendix. Keep here a very small
fraction corresponding to an overview. Reference the appendix for
details.


- You still have room for improvements. See structure change below.
- When you write "refer to \ref{ap.pajeformat}", do this way "refer to
  Appendix \ref{ap.pajeformat}". In the first form, reader has
  absolutely no idea what is that.


- Section about "Event Definition" is too small. You may extend a bit
  without going to further details. Remove mention to the appendix
  there, mention only _one time_ at the end of this section about the
  paje file format. Or even better, mention in the beggining of this
  section that here you just give an idea of the format, a full
  description is on the appendix.

_Comment_
- A figure C1 - C2, T1, T2 where you have on the left the type
  hierarchy and on the right the entities hierarchy. Align the levels
  of such hierarchies with dashed lines showing the
  correspondance. Pay attention to timestamped objects (you may
  represent horizontally).
  
*** Pajeng
_Comments_:
- Correction. On destruction, the container is only marked
  destroyed. It isn't cleared from memory. Until now, I haven't seen a
  case where a container will be destroyed and another re-created with
  the same name. That should be addressed in the future.

  _Comments_:
- what is not straightforward?
- I think inapropriate to call =pj_dump= as a module. It is a tool, a
  terminology you have already adopted previously in the text.
- Aspell
- What is a module? This is new to me.

_Comments_:
- Avoid details about Aiyra here, it is described in the next section.
- Of course mention that problems will be addressed by your tool.
- You are talking about plugins below, but I have no idea what it is.
  - Save it to later, mention you adress extensibility thourhg plugins
    that will be detailed later.


_Comments_:DONE
- Be positive. Instead of saying what has not been considered, say
  what has been considered. I refer you again to "The Elements of
  Style".

  _Comments_: DONE
- Correction: the =FileReader= reads a data chunk from file, puts in
  memory. It isn't aware of events at all. The =EventDecoder= breaks
  that data chunk in events (it splits each line in fields, until the
  end of line character), creating an object to represent that,
  passing along to the =PajeSimulator=.

_Comments_:
- I think you can safely call this the "class hierarchy" to
  differentiate from the "type hierarchy" of the paje file format. I
  feel that the way it is written confuses the eventual reader a
  bit.

_Comments_:
- Correction. All entities are available always, no matter their end
  time.

_Comments_:
- Again, mention figure before.
- I have changed the paragraph above to give you an example
- Pay attention to the text margins, you are not respecting them here
  when you export to PDF.

_Comments about figure_:
- Much better now.
- The drawing for the "File" is not connected to the =FileReader=.
- Text is too small in some cases (specially on extreme right where
  you have itemized text). You should print this page to have a
  feeling of the size.

_Comments about class hierarchy figures_
- I am still not completely happy about these
- Maybe because the size is not the same, I don't know.
  - Perhaps is just a question of style
  - If you are happy with them and the way they mix with the text, I'd
    be ready to accept them.
- All figures should be vectorized (not =png=, but =pdf=).


_Comments_:
- First paragraph is not clear enough. There is a misconnection
  between first and second phrases. Ok. Paje allows the user to
  extend. Great, but how he should do that? You did not explain.
- I think you should structure more this section. For example: "There
  are three issues with current's PajeNG implementation: X, Y and Z. X
  is... ; Y is... ; and Z is ....
  - It seems that text is simply dumped right now, without structure.



** Chapter 4

_Comment_
- Which appendix?
- Merge next one-line paragraph in the previous one.
- Generally speaking (global comment), you should use the present
  tense instead of the future. It reads much better.
  - Simply put: remove all "will" from the text


 _Comment_:
- You should always (when talking about figures) explain the figure. 
  - You did not explain the figure in this case. You should lead the
    reader to check the figure from time to time during reading.
  - This is valid for all figures (before and after this comment)

_Comment_:
- Since this "Parser" package also contains option handling, maybe you
  should change its name to something else, like "controller". I say
  controller because the simulator itself is imbricated (embedded) in
  the "Parser".
_Comments_:
- Why have you opted to leave extra fields out of your implementation?
  - You could say that despite this negative difference on your side,
    it is just a matter of changing everything so the plugins also get
    that kind of information in a generic manner.

_Comment_:
- when you send a complete "state" object, you already have the
  reference for the container, right? 

_Comments_:
- Remove all future tense, replace by present (generic comment valid
  for the whole text)
- I still have to do a complete review on your implementation, but I
  have the feeling that =aliases= should be left apart from the plugins
  sector.

_Comment_:
- Give an overview first! Please!
  - For example, a list of all points. Mention that you will start
    describing them in order.
    - Perhaps grouping them by variable, state, event, link, container
      would be nice. But explicit this group before describing
      details.
- By reading the first phrase you already have details.

_Comment_:
- Do you mean that the plugin has to call =getNature=?

** Chapter 5

_Comment_:
- if in the trace are only sets, you send "popStates"?
- I think we should think about better names for all points

_Comment_
- Invert your phrases: write in English.
- Example:
  - "The following entry points were used in the PajeInsertDBPlugin:
    ..."

_Comments_
- Why do you have an "implementation" subsection here and not for the
  other plugins. Structure should be homogeneous, otherwise the reader
  will ask "why have you done this way?"; or even worse: "what is that
  you are hiding?"

_Comment_:
- Say that this "bad" performance (unnaceptable, over 24 hours) was
  observed in some preliminary experimental trials you have done
  before conducting the rigorous performance evaluation of Chapter X.
- appliable => applicable

_Comments_:
- Invert the first phrase
- "consultations" => "requests"
- every time there is a ref command, don't forget to say what it is
  - Figure ref, instead of "ref".
_Comment_:
- In the last paragraph of previous chapter you say there are three
  plugins. Now you say there are two. In fact, there are three! It's
  just that one of them do nothing.
- Perhaps the =dump= plugin should be the default, because it does
  something useful for an eventual user.
- What is a "segment"? A new word you just introduced in this par.
- Create a section about the null plugin. Then, explain a little more
  why you have developed it (motivate). Move the two phrases about it
  from the paragraph above to it.

_Comment about text below_:
- what you mean =pjdump=, perhaps the Plugin identifier should be the
  classname, without the "Plugin". For example, =PajeDump=. By using
  =pjdump=, you may confuse the non attentive reader.

** Chapter 6
_Comment_:
- This paragraph should be moved to the "global part" of the
  methodology. It is always the same for all analysis, right?

_Comment_:
- Again, state that you have used averages should be a global
  assertion


_Comment_:
- Perhaps it would be nice to provide a table with the averages, so
  you can calculate the percentages considering *pjflex* as the
  baseline. That way, you can write that you are almost XX% faster,
  which is a very good result. People tend to like this numbers, since
  they are easy to remember. You can even mention them in the
  introduction and conclusion of your document.

_Comment_:
- What do you mean by "connection cost"? *database access*
- Java "may be very slow" if the heap size is big
- *orion1* is inconclusive, but this variability is not present in *big*, right?








* Notes 

Importance of implementation of plugins, to validade and to see flaws,
such as which objects to send to the plugin. 
Where the code is.

http://stackoverflow.com/questions/4935590/is-it-normal-for-mysql-to-be-slow-when-connecting-to-a-remote-host

java info



* Front page preparation                                             :ignore:

#+BEGIN_LaTeX
\title{Extensible Simulator for Replay of Trace Files in the Pajé format}
\author{Loureiro Bellini}{Tais}
\advisor[Prof.~Dr.]{Mello Schnorr}{Lucas}

\date{Maio}{2016}
\location{Porto Alegre}{RS}

% \renewcommand{\nominataReit}{Prof\textsuperscript{a}.~Wrana Maria Panizzi}
% \renewcommand{\nominataReitname}{Reitora}
% \renewcommand{\nominataPRE}{Prof.~Jos{\'e} Carlos Ferraz Hennemann}
% \renewcommand{\nominataPREname}{Pr{\'o}-Reitor de Ensino}
% \renewcommand{\nominataPRAPG}{Prof\textsuperscript{a}.~Joc{\'e}lia Grazia}
% \renewcommand{\nominataPRAPGname}{Pr{\'o}-Reitora Adjunta de P{\'o}s-Gradua{\c{c}}{\~a}o}
% \renewcommand{\nominataDir}{Prof.~Philippe Olivier Alexandre Navaux}
% \renewcommand{\nominataDirname}{Diretor do Instituto de Inform{\'a}tica}
% \renewcommand{\nominataCoord}{Prof.~Carlos Alberto Heuser}
% \renewcommand{\nominataCoordname}{Coordenador do PPGC}
% \renewcommand{\nominataBibchefe}{Beatriz Regina Bastos Haro}
% \renewcommand{\nominataBibchefename}{Bibliotec{\'a}ria-chefe do Instituto de Inform{\'a}tica}
% \renewcommand{\nominataChefeINA}{Prof.~Jos{\'e} Valdeni de Lima}
% \renewcommand{\nominataChefeINAname}{Chefe do \deptINA}
% \renewcommand{\nominataChefeINT}{Prof.~Leila Ribeiro}
% \renewcommand{\nominataChefeINTname}{Chefe do \deptINT}

%
% TODO: provide these keywords
%
% \keyword{formatação eletrônica de documentos}
% \keyword{\LaTeX}
% \keyword{ABNT}
% \keyword{UFRGS}
#+END_LaTeX

* Front page                                                       :ignore:
#+BEGIN_LaTeX
\maketitle
#+END_LaTeX
* Dedicatory                                                       :ignore:

#+BEGIN_LaTeX
% \clearpage
% \begin{flushright}
%     \mbox{}\vfill
%     {\sffamily\itshape
%       ``If I have seen farther than others,\\
%       it is because I stood on the shoulders of giants.''\\}
%     --- \textsc{Sir~Isaac Newton}
% \end{flushright}
#+END_LaTeX

* Acknowledgements                                                 :ignore:

#+BEGIN_LaTeX
% agradecimentos
%\chapter*{Agradecimentos}
%Agradeço ao \LaTeX\ por não ter vírus de macro\ldots
#+END_LaTeX

* Abstract                                                         :ignore:
                                                      
#+BEGIN_LaTeX
\begin{abstract}
#+END_LaTeX

Tracing is a very common method to observe program behavior, where
interesting program events are registered in trace files. Replaying
these trace files through simulation is used to analyze the data. The
simulation combines information that is spread in multiple events
deriving new and richer entities. Usually, this event processing is
done once and discarded, an approach adopted, for instance, by the
Pajé trace simulator. The objective of this proposal is to allow the
performance analyst to change the simulator behavior when entities are
detected according to his needs. This extensibility is implemented
through plugins, that could be developed by any programmer, where
every entity created is forwaded to it. It is the plugin's
responsibility to handle the entity. As a proof of concept, this work
presents the implementation of two plugins: a textual output similar
to an existing one in the Pajé tool; and a database insertion in a
pre-defined relational schema.  A performance analysis was developed
to compare Aiyra against the Pajé trace simulator. It is worth
highlighting that the new simulator had better performance results
with bigger files (over 120 Megabytes), that being possibly attributed
to the fact that it discards from memory entities that will no longer
be used. Additionally, the Pajé Insert Database plugin was evaluated
comparing its different possibilities of usage. In this investigation,
we varied the frequency of the insertions in the database by grouping
queries in memory. The aim of this test was to understand the impact
of the access to a database in the performance versus the memory
usage. The memory usage had more impact in the performance than the
accesses to the database themselves, probably due to the Garbage
Collector mechanism used by Java, the language used for the
implementation.

#+BEGIN_LaTeX
\end{abstract}
#+END_LaTeX

#+BEGIN_LaTeX
% resumo na outra língua
% como parametros devem ser passados o titulo e as palavras-chave
% na outra língua, separadas por vírgulas
\begin{englishabstract}{Titulo em pt-br.}{Palavra-chave 1. Palavra-chave 2.}
#+END_LaTeX

Put your Portuguese abstract here.

#+BEGIN_LaTeX
\end{englishabstract}
#+END_LaTeX
* Lists                                                            :ignore:

#+BEGIN_LaTeX
\listoffigures
\listoftables

% lista de abreviaturas e siglas
% o parametro deve ser a abreviatura mais longa
\begin{listofabbrv}{SPMD}
    \item[SMP] Symmetric Multi-Processor
    \item[NUMA] Non-Uniform Memory Access
    \item[SIMD] Single Instruction Multiple Data
    \item[SPMD] Single Program Multiple Data
    \item[ABNT] Associação Brasileira de Normas Técnicas
\end{listofabbrv}


% idem para a lista de símbolos
% \begin{listofsymbols}{$\alpha\beta\pi\omega$}
%     \item[$\sum{\frac{a}{b}}$] Somatório do produtório
%     \item[$\alpha\beta\pi\omega$] Fator de inconstância do resultado
% \end{listofsymbols}
#+END_LaTeX

* Sumário                                                          :ignore:

#+BEGIN_LaTeX
\tableofcontents
#+END_LaTeX
